generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ERole {
  CUSTOMER
  DRIVER
  ADMIN
  SUPER_ADMIN
}

enum EGender {
  Male
  Female
  Others
}

enum EDriverStatus {
  Available
  Unavailable
  In_A_Trip
  Accident
  On_Vacation
}



enum EFuelType {
  LPG
  CNG
  Petrol
  Diesel
}

enum EVehicleType {

  M
  L
  XL
  XXL

}

enum EVehicleBrand {
  Toyota
  Audi
  BMW
  Nissan
}

enum EVehicleStatus {
  Available
  In_A_Trip
  Accident
  Maintenance
}

enum EBookingStatus {
  Pending
  Approved
  End
}

enum EPaymentStatus {
  Unpaid
  Paid
}


model User {
  id String @id @default(uuid())

  email    String @unique
  password String
  role     ERole  @default(CUSTOMER)

  profile  Profile?
  driver   Driver?
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Driver {
  id String @id @default(uuid())

  driverId      String
  licenseNo     String
  licenseExpire DateTime
  nidNo         String
  status        EDriverStatus @default(Available)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  vehicle  Vehicle?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("drivers")
}

model Profile {
  id String @id @default(uuid())

  name         String
  dateOfBirth  DateTime?
  address      String?
  image        String?
  contactNo    String
  emergContact String?
  gender       EGender?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Vehicle {
  id                 String         @id @default(uuid())
  vehicleId          String
  model              String
  mileage            Float
  color              String
  images             String[]
  overview           String
  basePrice          Int
  fuelType           EFuelType
  passengerCapacity  Int
  location           String
  plateNo            String
  chassisNo          String
  status             EVehicleStatus @default(Available)
  owner              String?
  vehicleType        EVehicleType
  brand              EVehicleBrand
  year               String
  registrationNumber String
  rentalRate         Int

  driverId String @unique
  driver   Driver @relation(fields: [driverId], references: [id])

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

model Booking {
  id String @id @default(uuid())

  bookingId       String
  pickUpDateTime  DateTime
  returnDateTime  DateTime
  pickUpLocation  String
  dropOffLocation String
  pickUpTime      String
  bookingStatus   EBookingStatus @default(Pending)
  paymentStatus   EPaymentStatus @default(Unpaid)

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

