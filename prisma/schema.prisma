generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ERole {
  CUSTOMER
  DRIVER
  ADMIN
  SUPER_ADMIN
}

enum EGender {
  Male
  Female
  Others
}

enum EDriverStatus {
  Available
  Unavailable
  In_A_Trip
  Accident
  On_Vacation
}

enum ERentType {
  Daily
  Weekly
  Monthly
}

enum EFuelType {
  LPG
  CNG
  Petrol
  Diesel
  Gasoline
  Kerosene
}

enum EVehicleType {
  S
  M
  L
  XL
  XXL
  XXXL
}

enum EVehicleBrand {
  Toyota
  Hyundai
  Audi
  Proton
  Mitsubishi
  BMW
  Suzuki
  Subaru
  Nissan
  Mercedes
  Mazda
  Honda
}

enum EVehicleStatus {
  Available
  In_A_Trip
  Accident
  Maintenance
}

enum EBookingStatus {
  Pending
  Approved
  In_Trip
  End
}

enum EPaymentStatus {
  Unpaid
  Partial
  Paid
}

enum ERentStatus {
  Pending
  Active
  End
}

model User {
  id String @id @default(uuid())

  email    String @unique
  password String
  role     ERole  @default(CUSTOMER)

  profile  Profile?
  driver   Driver?
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Driver {
  id String @id @default(uuid())

  driverId      String
  licenseNo     String
  licenseExpire DateTime
  nidNo         String
  status        EDriverStatus @default(Available)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  vehicle  Vehicle?
  rents    Rent[]
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("drivers")
}

model Profile {
  id String @id @default(uuid())

  name         String
  dateOfBirth  DateTime?
  address      String?
  image        String?
  contactNo    String
  emergContact String?
  gender       EGender?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Vehicle {
  id                 String         @id @default(uuid())
  vehicleId          String
  model              String
  mileage            Float
  color              String
  images             String[]
  overview           String
  basePrice          Int
  fuelType           EFuelType
  passengerCapacity  Int
  location           String
  plateNo            String
  chassisNo          String
  status             EVehicleStatus @default(Available)
  owner              String?
  vehicleType        EVehicleType
  brand              EVehicleBrand
  year               String
  registrationNumber String
  rentalRate         Int

  driverId String @unique
  driver   Driver @relation(fields: [driverId], references: [id])

  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

model Booking {
  id String @id @default(uuid())

  bookingId       String
  pickUpDateTime  DateTime
  returnDateTime  DateTime
  pickUpLocation  String
  dropOffLocation String
  rentType        ERentType
  bookingStatus   EBookingStatus @default(Pending)
  paymentStatus   EPaymentStatus @default(Unpaid)

  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  rent    Rent?
  promoId String?

  driverId String
  driver   Driver @relation(fields: [driverId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Rent {
  id String @id @default(uuid())

  downPayment        Int?
  discount           Int?
  startTime          DateTime    @db.Date
  endTime            DateTime    @db.Date
  overTime           DateTime?   @db.Date
  damageCompensation Int?
  refund             Int?
  totalCost          Int
  rentType           ERentType   @default(Daily)
  rentStatus         ERentStatus @default(Pending)

  bookingId String @unique

  booking  Booking @relation(fields: [bookingId], references: [id])
  driverId String
  driver   Driver  @relation(fields: [driverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rents")
}
